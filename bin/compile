#!/bin/bash
set -eo pipefail
cache_path=$1

# Load config vars into environment (from https://devcenter.heroku.com/articles/buildpack-api)
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

# Enable verbose debugging if configured to -- though this has to come after
# we've loaded environment configs.
if [ -n "${BUILDPACK_VERBOSE+1}" ]; then
  set -x
fi

if [ -z "$MONGO_URL" ] ; then
  echo "MONGO_URL is not defined."
  exit 1
fi

if [ -z "$ROOT_URL" ] ; then
  echo "ROOT_URL is not defined."
  exit 1
fi

# Get the path to dir one above this file.
BUILDPACK_DIR=$(cd -P -- "$(dirname -- "$0")" && cd .. && pwd -P)
# Get the directory our app is checked out in (the "BUILD_DIR"), passed by Heroku
APP_CHECKOUT_DIR=$1

# Set meteor app dir's location to the root of the git repo, plus the value of
# METEOR_APP_DIR (which defaults empty).  If you put the meteor app in src/ or
# some other subdirectory, define METEOR_APP_DIR.
APP_SOURCE_DIR="${APP_CHECKOUT_DIR}"
if [ -n "$METEOR_APP_DIR" ]; then
  APP_SOURCE_DIR="${APP_SOURCE_DIR}/${METEOR_APP_DIR}"
fi

# Try "$APP_SOURCE_DIR/app/" if meteor app isn't there (the "Iron scaffolding
# tool" default).
if [ ! -d "$APP_SOURCE_DIR/.meteor" ] && [ -d "$APP_SOURCE_DIR/app/.meteor" ]; then
  APP_SOURCE_DIR="$APP_SOURCE_DIR/app/"
fi
if [ ! -d "$APP_SOURCE_DIR/.meteor" ]; then
  echo "FATAL: Can't find meteor app. Set METEOR_APP_DIR to the relative location of the meteor app within your repository if it's not in the root or 'app/' supdirectory.  (Tried ${APP_SOURCE_DIR})"
  exit 1
fi

METEOR_DIR="$cache_path/meteor"
METEOR="$METEOR_DIR/.meteor/meteor"
COMPILE_DIR_SUFFIX=".meteor/heroku_build"
COMPILE_DIR="$APP_CHECKOUT_DIR"/"$COMPILE_DIR_SUFFIX"
PATH="$METEOR_DIR/.meteor:$COMPILE_DIR/bin:$PATH"

mkdir -p "$APP_CHECKOUT_DIR" "$METEOR_DIR" "$COMPILE_DIR"

#
# Install node
#
echo "-----> Installing node"
NODE_VERSION=`curl -sS --get https://semver.io/node/resolve/0.10.x`
NODE_URL="http://s3pository.heroku.com/node/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"
curl -sS $NODE_URL -o - | tar -zxf - -C $COMPILE_DIR --strip 1

export npm_config_prefix="$COMPILE_DIR"
export CPATH="$COMPILE_DIR"/include
export CPPPATH="$CPATH"

if [ -f "$METEOR" ] ; then
  echo "-----> Meteor already installed"
else
  echo "-----> Installing Meteor"
  curl -sS https://install.meteor.com | HOME="$METEOR_DIR" /bin/sh > /dev/null 2>&1

  CUR_RELEASE=`HOME=$METEOR_DIR $METEOR --version | sed -e 's/Meteor /METEOR@/'`
  APP_RELEASE=`cat "$APP_SOURCE_DIR/.meteor/release"`

  if test "$CUR_RELEASE" != "$APP_RELEASE" ; then
    # Sort CUR_RELEASE and APP_RELEASE and find the oldest
    OLDER_RELEASE=`echo "$CUR_RELEASE\n$APP_RELEASE" | sort --version-sort | head -n1`
    if [ "$CUR_RELEASE" = "$OLDER_RELEASE" ]; then
      echo "-----> Upgrading meteor to $APP_RELEASE"
      HOME=$METEOR_DIR $METEOR update --release $APP_RELEASE
    fi
  fi
fi

echo "-----> Bundling bundle"
cd $APP_SOURCE_DIR

# If we use npm on root, run npm install.
if [ -e "$APP_SOURCE_DIR"/package.json ]; then
  npm install
fi

if [ -n "${BUILDPACK_PRELAUNCH_METEOR+1}" ]; then
  echo "-----> BUILDPACK_PRELAUNCH_METEOR: Pre-launching meteor to build packages assets"
  HOME=$METEOR_DIR timeout -s9 60 $METEOR --settings settings.json || true
fi

BUNDLE_DEST="$cache_path/build"
mkdir -p $BUNDLE_DEST

echo "-----> Building Meteor with ROOT_URL: $ROOT_URL"
HOME=$METEOR_DIR $METEOR build --architecture=os.linux.x86_64 --server-only --server=$ROOT_URL --directory $BUNDLE_DEST
cp -fr $BUNDLE_DEST/bundle "$COMPILE_DIR/app"

# If we use npm, run npm install.
if [ -e "$COMPILE_DIR"/app/programs/server/package.json ]; then
  cd "$COMPILE_DIR"/app/programs/server && npm install
fi

#
# Environment
#
# Add an export of PATH which includes our compile dir, etc.
echo "-----> Adding PATH environment"
mkdir -p "$APP_CHECKOUT_DIR"/.profile.d
cat > "$APP_CHECKOUT_DIR"/.profile.d/path.sh <<EOF
  #!/bin/sh
  export PATH=\$HOME/$COMPILE_DIR_SUFFIX/bin:\$PATH
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/$COMPILE_DIR_SUFFIX/lib
EOF
